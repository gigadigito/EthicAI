// <auto-generated />
using System;
using EthicAI.EntityModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(EthicAIDbContext))]
    [Migration("20250525221104_EthicAIMigration")]
    partial class EthicAIMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.NftFutebol.Bet", b =>
                {
                    b.Property<int>("BetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cd_bet");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BetId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("nr_amount");

                    b.Property<DateTime>("BetTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("dt_bet_time");

                    b.Property<bool>("Claimed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_claimed");

                    b.Property<DateTime?>("ClaimedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("dt_claimed_at");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_match");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("nr_position");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_team");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_user");

                    b.HasKey("BetId");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("bet", (string)null);
                });

            modelBuilder.Entity("DAL.NftFutebol.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cd_currency");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurrencyId"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp")
                        .HasColumnName("dt_last_updated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tx_name");

                    b.Property<double>("PercentageChange")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("nr_percentage_change");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tx_symbol");

                    b.HasKey("CurrencyId");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("DAL.NftFutebol.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cd_match");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MatchId"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("dt_end_time");

                    b.Property<int>("ScoreA")
                        .HasColumnType("integer")
                        .HasColumnName("nr_score_a");

                    b.Property<int>("ScoreB")
                        .HasColumnType("integer")
                        .HasColumnName("nr_score_b");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("dt_start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("in_status");

                    b.Property<int>("TeamAId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_team_a");

                    b.Property<int>("TeamBId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_team_b");

                    b.HasKey("MatchId");

                    b.HasIndex("TeamAId");

                    b.HasIndex("TeamBId");

                    b.ToTable("match", (string)null);
                });

            modelBuilder.Entity("DAL.NftFutebol.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cd_team");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeamId"));

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("cd_currency");

                    b.HasKey("TeamId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("DAL.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tx_content");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("aq_image");

                    b.Property<int>("PostCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("post_category_id");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("dt_post");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tx_title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tx_url");

                    b.HasKey("Id");

                    b.HasIndex("PostCategoryId");

                    b.ToTable("post", (string)null);
                });

            modelBuilder.Entity("DAL.PostCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tx_name");

                    b.HasKey("Id");

                    b.ToTable("post_category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Science"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Health"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Education"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Business"
                        });
                });

            modelBuilder.Entity("DAL.PreSalePurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_purchase");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("EthicAIAmt")
                        .HasColumnType("decimal(18, 8)")
                        .HasColumnName("ethic_ai_amount");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("purchase_date");

                    b.Property<decimal>("SolAmount")
                        .HasColumnType("decimal(18, 8)")
                        .HasColumnName("sol_amount");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("transaction_hash");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("pre_sale_purchase", (string)null);
                });

            modelBuilder.Entity("DAL.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cd_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("nr_balance");

                    b.Property<string>("Company")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nm_company");

                    b.Property<DateTime>("DtCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_create");

                    b.Property<DateTime?>("DtHumanValidation")
                        .HasColumnType("timestamp")
                        .HasColumnName("dt_human_validation");

                    b.Property<DateTime>("DtUpdate")
                        .HasColumnType("timestamp")
                        .HasColumnName("dt_update");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("tx_email");

                    b.Property<string>("HumanCaptcha")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tx_human_captcha");

                    b.Property<string>("HumanRepresentative")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nm_human_representative");

                    b.Property<string>("IAModel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nm_ia_model");

                    b.Property<string>("IAName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nm_ia");

                    b.Property<bool?>("IsHuman")
                        .HasColumnType("boolean")
                        .HasColumnName("is_human");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp")
                        .HasColumnName("dt_last_login");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nm_name");

                    b.Property<string>("Wallet")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tx_wallet");

                    b.HasKey("UserID");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("DAL.NftFutebol.Bet", b =>
                {
                    b.HasOne("DAL.NftFutebol.Match", "Match")
                        .WithMany("Bets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.NftFutebol.Team", "Team")
                        .WithMany("Bets")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.NftFutebol.Match", b =>
                {
                    b.HasOne("DAL.NftFutebol.Team", "TeamA")
                        .WithMany("MatchesAsTeamA")
                        .HasForeignKey("TeamAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.NftFutebol.Team", "TeamB")
                        .WithMany("MatchesAsTeamB")
                        .HasForeignKey("TeamBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TeamA");

                    b.Navigation("TeamB");
                });

            modelBuilder.Entity("DAL.NftFutebol.Team", b =>
                {
                    b.HasOne("DAL.NftFutebol.Currency", "Currency")
                        .WithMany("Teams")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DAL.Post", b =>
                {
                    b.HasOne("DAL.PostCategory", "PostCategory")
                        .WithMany("Posts")
                        .HasForeignKey("PostCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostCategory");
                });

            modelBuilder.Entity("DAL.PreSalePurchase", b =>
                {
                    b.HasOne("DAL.User", "User")
                        .WithMany("PreSalePurchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.NftFutebol.Currency", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DAL.NftFutebol.Match", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("DAL.NftFutebol.Team", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("MatchesAsTeamA");

                    b.Navigation("MatchesAsTeamB");
                });

            modelBuilder.Entity("DAL.PostCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("DAL.User", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("PreSalePurchases");
                });
#pragma warning restore 612, 618
        }
    }
}
