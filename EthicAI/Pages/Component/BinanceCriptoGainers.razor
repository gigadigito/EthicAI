@page "/top-gainers"
@using static BLL.BinanceService
@inject HttpClient Http
@using System.Globalization

<h3>Top 5 Gainers - Cryptocurrencies</h3>

@if (topGainers == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Symbol</th>
                <th>Name</th>
                <th>Price (USDT)</th>
                <th>24h Change (%)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var crypto in topGainers)
            {
                <tr>
                    <td>@crypto.Symbol</td>
                 @*    <td>@(cryptoNames.ContainsKey(crypto.Symbol) ? cryptoNames[crypto.Symbol] : "Unknown")</t *@d>
                    <td>@(decimal.TryParse(crypto.LastPrice, NumberStyles.Any, CultureInfo.InvariantCulture, out var lastPrice) ? lastPrice.ToString("N2", CultureInfo.InvariantCulture) : "N/A")</td>
                    <td>@(decimal.TryParse(crypto.PriceChangePercent, NumberStyles.Any, CultureInfo.InvariantCulture, out var changePercent) ? changePercent.ToString("N2", CultureInfo.InvariantCulture) + "%" : "N/A")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Crypto> topGainers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch 24hr ticker data for all pairs from Binance
            var response = await Http.GetFromJsonAsync<List<Crypto>>("https://api.binance.com/api/v3/ticker/24hr");

            if (response == null || !response.Any())
            {
                Console.WriteLine("Response is null or empty.");
                return;
            }

            // Filter top 5 gainers by 24-hour change percentage
            topGainers = response
               .Where(c => c.Symbol.EndsWith("USDT")) // Filter for USDT pairs
               .OrderByDescending(c => decimal.TryParse(c.PriceChangePercent, NumberStyles.Any, CultureInfo.InvariantCulture, out var percent) ? percent : 0)
               .Take(10)
               .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }


}
