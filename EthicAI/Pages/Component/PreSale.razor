@page "/presale"
@using DAL
@using EthicAI.Data
@using EthicAI.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject UserService userService
@inject IPreSaleService PreSaleService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container py-5">
    <h2 class="text-center mb-4">Pré-Venda da Moeda EthicAI</h2>

    <div class="card p-4">
        @if (string.IsNullOrEmpty(_Wallet))
        {
            <div class="text-center">
                <h4 class="mb-3">Conecte sua Carteira Solana</h4>
                <button class="btn btn-primary" @onclick="RequestAuthorization">Connect Phantom</button>
            </div>
        }
        else
        {
            <div class="mb-3">
                <p>Carteira Conectada: <strong>@_Wallet</strong></p>
                <p>Bem-vindo, <strong>@_Name</strong>!</p>
            </div>

            <div class="mb-3">
                <label for="solAmount" class="form-label">Quantidade em Solana (SOL)</label>
                <input type="number" class="form-control" id="solAmount" @bind="solAmount" @oninput="CalculateEthicAI" min="0" step="0.01" placeholder="Insira a quantidade de SOL">
            </div>

            <div class="mb-3">
                <label class="form-label">Quantidade Equivalente em EthicAI</label>
                <input type="text" class="form-control" value="@ethicAIAmt" readonly />
            </div>

            <div class="mb-3">
                <p>Taxa de Conversão: <strong>1 SOL = @conversionRate EthicAI</strong></p>
            </div>

            <button class="btn btn-success w-100" @onclick="PurchaseTokens" disabled="@isPurchasing">
                @if (isPurchasing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>&nbsp;Processando...</span>
                }
                else
                {
                    <span>Comprar EthicAI</span>
                }
            </button>


            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @messageClass mt-3" role="alert">
                    @message
                </div>
            }
        }
    </div>
</div>

@code {
    public string _Wallet { get; set; }
    public string _Name { get; set; }
    private decimal solAmount;
    private decimal ethicAIAmt;
    private decimal conversionRate;
    private bool isPurchasing = false;
    private string message;
    private string messageClass;

    [Parameter]
    public EventCallback OnLogin { get; set; }

    private User user = new User();


    // Método para calcular o valor em EthicAI
    private void CalculateEthicAI(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out decimal sol))
        {
            ethicAIAmt = sol * conversionRate;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var storedUser = await sessionStorage.GetItemAsync<User>("User");

            if (storedUser != null)
            {
                _Wallet = storedUser.Wallet;
                _Name = storedUser.Name;
            }

            conversionRate = PreSaleService.GetConversionRate();
        }
        catch (Exception ex)
        {
            // Log de erro (opcional)
            await LogMessageToBrowserConsole($"Erro no OnInitializedAsync: {ex.Message}");
            ShowMessage($"Erro ao inicializar: {ex.Message}", "alert-danger");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                var storedUser = await sessionStorage.GetItemAsync<User>("User");

                if (storedUser != null)
                {
                    _Wallet = storedUser.Wallet;
                    _Name = storedUser.Name;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            // Log de erro (opcional)
            await LogMessageToBrowserConsole($"Erro no OnAfterRenderAsync: {ex.Message}");
            ShowMessage($"Erro ao renderizar: {ex.Message}", "alert-danger");
        }
    }

    private async Task RequestAuthorization()
    {
        try
        {
            // Chamar o JavaScript para conectar à carteira Solana (Phantom)
            var result = await JS.InvokeAsync<SolanaLoginResult>("solanaLogin");

            if (result != null && !string.IsNullOrEmpty(result.PublicKey))
            {
                _Wallet = result.PublicKey;

                // Log no console do navegador
                await LogMessageToBrowserConsole($"Carteira conectada: {_Wallet}");

                // Verificar se o usuário já existe no sistema usando o UserService injetado
                var existingUser = await userService.GetUserByWallet(_Wallet);

                if (existingUser == null)
                {
                    // Usuário não cadastrado, criar novo usuário
                    var newUser = new User
                        {
                            Wallet = _Wallet,
                            DtUpdate = DateTime.Now,
                            LastLogin = DateTime.Now,
                            Name = _Name ?? ""
                        };

                    var resultAdd = await userService.AddUser(newUser);

                    if (resultAdd == "OK")
                    {
                        await LogMessageToBrowserConsole("Usuário criado com sucesso!");

                        // Logar o usuário
                        await sessionStorage.SetItemAsync("User", newUser);
                        Navigation.NavigateTo("/EthicaiChoice");
                    }
                    else
                    {
                        await LogMessageToBrowserConsole($"Erro ao adicionar o usuário: {resultAdd}");
                        ShowMessage($"Erro ao adicionar o usuário: {resultAdd}", "alert-danger");
                    }
                }
                else
                {
                    // Logar o usuário
                    await sessionStorage.SetItemAsync("User", existingUser);

                    if (existingUser.IsHuman == null)
                    {
                        Navigation.NavigateTo("/EthicaiChoice");
                        return;
                    }

                    await OnLogin.InvokeAsync();
                    existingUser.DtUpdate = DateTime.Now;
                    existingUser.LastLogin = DateTime.Now;

                    await userService.UpdateUser(existingUser);

                    await LogMessageToUser("Usuário logado com sucesso.");
                }
            }
            else
            {
                await LogMessageToUser("Erro ao conectar à carteira Solana. Verifique se a Phantom Wallet está instalada e conectada.");
            }
        }
        catch (JSException jsEx)
        {
            // Tratamento de erros de JavaScript
            await LogMessageToBrowserConsole($"Erro ao conectar com o JavaScript: {jsEx.Message}");
            ShowMessage($"Erro ao conectar com o JavaScript: {jsEx.Message}", "alert-danger");
        }
        catch (Exception ex)
        {
            // Captura e exibição de qualquer outro erro
            await LogMessageToBrowserConsole($"Erro inesperado: {ex.Message}");
            ShowMessage($"Erro inesperado: {ex.Message}", "alert-danger");
        }
    }

    private async Task PurchaseTokens()
    {
        if (solAmount <= 0)
        {
            ShowMessage("Por favor, insira uma quantidade válida de SOL.", "alert-danger");
            return;
        }

        isPurchasing = true;
        message = string.Empty;
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (!user.Identity.IsAuthenticated)
            {
                ShowMessage("Você precisa estar logado para realizar uma compra.", "alert-warning");
                return;
            }

            int userId = 1; // Ou outra propriedade de identificação1

            // Integre com a carteira Solana para obter o transactionHash
            // Aqui assumimos que você já possui o transactionHash
            string transactionHash = "hash_da_transacao_simulada";

            bool success = await PreSaleService.ProcessPurchaseAsync(userId, solAmount, transactionHash);

            if (success)
            {
                ShowMessage("Compra realizada com sucesso!", "alert-success");
                // Redirecionar ou atualizar a página conforme necessário
            }
            else
            {
                ShowMessage("Falha na compra. Por favor, tente novamente.", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Erro ao processar a compra: {ex.Message}", "alert-danger");
        }
        finally
        {
            isPurchasing = false;
        }
    }

    // Função para logar mensagens no console do navegador
    private async Task LogMessageToBrowserConsole(string message)
    {
        await JS.InvokeVoidAsync("logToConsole", message);
    }

    // Função para exibir mensagens ao usuário via alert
    private async Task LogMessageToUser(string message)
    {
        await JS.InvokeVoidAsync("AlertToUser", message);
    }

    private void ShowMessage(string msg, string cssClass)
    {
        message = msg;
        messageClass = cssClass;
    }

    public class SolanaLoginResult
    {
        public string PublicKey { get; set; }
    }
}
