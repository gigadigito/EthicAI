@page "/presale"
@using DAL
@using EthicAI.Data
@using EthicAI.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Text.Json
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject UserService userService
@inject IPreSaleService PreSaleService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject Blazored.Toast.Services.IToastService ToastService

<div class="container py-5">
    <h2 class="text-center mb-4">EthicAI Token Pre-Sale</h2>

    <div class="card p-4">
        @if (string.IsNullOrEmpty(_Wallet))
        {
            <div class="text-center">
                <h4 class="mb-3">Connect your Solana Wallet</h4>
                <button class="btn btn-primary" @onclick="RequestAuthorization">Connect Phantom</button>
            </div>
        }
        else
        {
            <div class="mb-3">
                <p>Connected Wallet: <strong>@_Wallet</strong></p>
                <p>Welcome, <strong>@_Name</strong>!</p>
            </div>

            <div class="mb-3">
                <label for="solAmount" class="form-label">Amount in Solana (SOL)</label>
                <div class="input-group">
                    <input type="number" class="form-control" id="solAmount" @bind="solAmount" @oninput="CalculateEthicAI" min="0.01" step="0.01" placeholder="Enter SOL amount">
                    <span class="input-group-text">USD</span>
                    <input type="text" class="form-control" value="@solAmountInUSD.ToString("C2", System.Globalization.CultureInfo.InvariantCulture)" disabled placeholder="Equivalent in USD" />
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Equivalent in EthicAI</label>
                <input type="text" class="form-control" value="@ethicAIAmt.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)" readonly />
            </div>

            <div class="mb-3">
                <p>Conversion Rate: <strong>1 SOL = @conversionRate EthicAI</strong></p>
            </div>

            <button class="btn btn-success w-100" @onclick="ProcessPurchase" disabled="@isPurchasing">
                @if (isPurchasing)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>&nbsp;Processing...</span>
                }
                else
                {
                    <span>Purchase EthicAI</span>
                }
            </button>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @messageClass mt-3" role="alert">
                    @message
                </div>
            }
        }
    </div>

    @if (purchases?.Any() == true)
    {
        <h5 class="mt-5 m-5 pt-10">Purchase History</h5>
        <table class="table table-bordered table-striped mt-3">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Purchase Amount in EthicAI</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var purchase in purchases)
                {
                    <tr>
                        <td>@purchase.PurchaseDate.ToString("MM/dd/yyyy HH:mm")</td>
                        <td>@purchase.EthicAIAmt.ToString("F6")</td>
                    </tr>
                }
                <tr>
                    <td><strong>Total</strong></td>
                    <td><strong>@purchases.Sum(p => p.EthicAIAmt).ToString("F6")</strong></td>
                </tr>
            </tbody>
        </table>
    }
</div>

@code {
    public string _Wallet { get; set; }
    public string _Name { get; set; }
    private decimal solAmount;
    private decimal ethicAIAmt;
    private decimal conversionRate;
    private decimal solToUSD;
    private decimal solAmountInUSD;
    private bool isPurchasing = false;
    private string message;
    private string messageClass;
    private string transactionHash;
    private List<PreSalePurchase> purchases = new();
    private string destinationWallet;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            destinationWallet = Configuration["PreSale:DestinationWallet"];

            var storedUser = await sessionStorage.GetItemAsync<User>("User");

            if (storedUser != null)
            {
                _Wallet = storedUser.Wallet;
                _Name = storedUser.Name;

                purchases = await PreSaleService.GetPurchasesByWalletAsync(_Wallet);
            }

            conversionRate = PreSaleService.GetConversionRate();
            solToUSD = await GetSolanaPriceInUSD();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error on OnInitializedAsync: {ex.Message}");
        }
    }

    private async Task<decimal> GetSolanaPriceInUSD()
    {
        try
        {
            var response = await new HttpClient().GetAsync("https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd");
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<JsonElement>();
            return result.GetProperty("solana").GetProperty("usd").GetDecimal();
        }
        catch
        {
            return 0;
        }
    }

    private void CalculateEthicAI(ChangeEventArgs e)
    {
        string input = e.Value?.ToString().Replace(",", ".");
        if (decimal.TryParse(input, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out decimal sol))
        {
            ethicAIAmt = sol * conversionRate;
            solAmountInUSD = sol * solToUSD;
        }
        else
        {
            ethicAIAmt = 0;
            solAmountInUSD = 0;
        }
    }

    private async Task ProcessPurchase()
    {
        if (solAmount <= 0)
        {
            ShowMessage("Please enter a valid amount of SOL.", "alert-warning");
            return;
        }

        isPurchasing = true;

        try
        {
            transactionHash = await JS.InvokeAsync<string>("sendSolTransaction", destinationWallet, solAmount);

            if (!string.IsNullOrEmpty(transactionHash))
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity.IsAuthenticated)
                {
                    int userId = int.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier).Value);

                    bool success = await PreSaleService.ProcessPurchaseAsync(userId, solAmount, transactionHash);

                    if (success)
                    {
                        ShowMessage("Purchase completed successfully!", "alert-success");
                        purchases = await PreSaleService.GetPurchasesByWalletAsync(_Wallet);
                    }
                    else
                    {
                        ShowMessage("Failed to register purchase. Please try again.", "alert-danger");
                    }
                }
            }
            else
            {
                ShowMessage("Error processing transaction on the blockchain.", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error processing purchase: {ex.Message}", "alert-danger");
        }
        finally
        {
            isPurchasing = false;
        }
    }

    private async Task RequestAuthorization()
    {
        try
        {
            var result = await JS.InvokeAsync<SolanaLoginResult>("solanaLogin");

            if (result != null && !string.IsNullOrEmpty(result.PublicKey))
            {
                _Wallet = result.PublicKey;

                var existingUser = await userService.GetUserByWallet(_Wallet);

                if (existingUser == null)
                {
                    var newUser = new User
                        {
                            Wallet = _Wallet,
                            DtUpdate = DateTime.Now,
                            LastLogin = DateTime.Now,
                            Name = _Name ?? ""
                        };

                    var resultAdd = await userService.AddUser(newUser);

                    if (resultAdd == "OK")
                    {
                        await sessionStorage.SetItemAsync("User", newUser);
                        ShowMessage("User created successfully!", "alert-success");
                        Navigation.NavigateTo("/EthicaiChoice");
                    }
                    else
                    {
                        ShowMessage($"Error adding user: {resultAdd}", "alert-danger");
                    }
                }
                else
                {
                    await sessionStorage.SetItemAsync("User", existingUser);
                    ShowMessage("User logged in successfully.", "alert-success");
                    purchases = await PreSaleService.GetPurchasesByWalletAsync(_Wallet);
                }
            }
            else
            {
                ShowMessage("Error connecting to Solana wallet.", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error connecting to wallet: {ex.Message}", "alert-danger");
        }
    }

    private void ShowMessage(string msg, string cssClass)
    {
        // Exibe a mensagem usando o ToastService
        if (cssClass.Contains("alert-success"))
        {
            ToastService.ShowSuccess(msg);
        }
        else if (cssClass.Contains("alert-warning"))
        {
            ToastService.ShowWarning(msg);
        }
        else
        {
            ToastService.ShowError(msg);
        }

        // Exibe a mensagem na interface
        message = msg;
        messageClass = cssClass;
    }

    public class SolanaLoginResult
    {
        public string PublicKey { get; set; }
    }
}
