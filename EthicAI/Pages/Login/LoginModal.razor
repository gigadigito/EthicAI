@using DAL
@using EthicAI.Data
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject UserService userService

<div class="nk-modal modal fade" id="modalLogin" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-body">

                @if (String.IsNullOrEmpty(CarteiraUser))
                {
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span class="ion-android-close"></span>
                    </button>

                    <h4 class="mb-0"><span class="text-main-1">Conectar</span> Carteira Solana</h4>

                    <div class="nk-gap-1"></div>
                    <form action="#" class="nk-form text-white">
                        <div class="row vertical-gap">
                            <div class="col-md-6"></div>
                            <div class="col-md-6"></div>
                        </div>

                        <div class="nk-gap-1"></div>
                        <div class="row vertical-gap">
                            <div class="col-md-6">
                                <a href="#" @onclick="RequestAuthorization" class="nk-btn nk-btn-rounded nk-btn-color-white nk-btn-block">Conectar Phantom</a>
                            </div>
                        </div>
                    </form>
                }
                else
                {
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span class="ion-android-close"></span>
                    </button>

                    <h4 class="mb-0"><span class="text-main-1">Bem-vindo </span> @NomeUser</h4>

                    <h5 class="mb-0" style="margin-top:5px">Obrigado por nos ajudar na luta contra as máquinas IA! </h5>
                    <form action="#" class="nk-form text-white">
                        <div class="row vertical-gap">
                            <div class="col-md-6">
                                @if (String.IsNullOrEmpty(NomeUser))
                                {
                                    <div class="nk-gap">Informe seu nome de usuário</div>
                                    <div class="nk-gap"></div>
                                    <input type="text" @bind="NomeUser" name="user" class="form-control" placeholder="Nome de usuário / apelido">
                                }
                            </div>
                            <div class="col-md-12">
                                Seu Saldo em ETCAI: 0,00000.00000
                                <div class="nk-gap">@CarteiraUser</div>
                            </div>
                        </div>
                    </form>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public string CarteiraUser { get; set; }
    public string NomeUser { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedUser = await sessionStorage.GetItemAsync<User>("User");

            if (storedUser != null)
            {
                CarteiraUser = storedUser.Wallet;
                NomeUser = storedUser.Name;
            }
        }
    }

    private async Task RequestAuthorization()
    {
        try
        {
            // Chamar o JavaScript para conectar à carteira Solana (Phantom)
            var result = await JS.InvokeAsync<SolanaLoginResult>("solanaLogin");

            if (result != null && !string.IsNullOrEmpty(result.PublicKey))
            {
                CarteiraUser = result.PublicKey;

                // Log no console do navegador
                await LogMessageToBrowserConsole($"Carteira conectada: {CarteiraUser}");

                // Verificar se o usuário já existe no sistema usando o UserService injetado
                var user = await userService.GetUserByWallet(CarteiraUser);

                if (user == null)
                {
                    // Usuário não cadastrado, criar novo usuário
                    var newUser = new User
                        {
                            Wallet = CarteiraUser,
                            DtUpdate = DateTime.Now,
                            Name = NomeUser ?? ""
                        };

                    var resultAdd = await userService.AddUser(newUser);

                    if (resultAdd == "OK")
                    {
                        await LogMessageToBrowserConsole("Usuário criado com sucesso!");

                        // Logar o usuário
                        await sessionStorage.SetItemAsync("User", newUser);
                        Navigation.NavigateTo("/EthicaiChoice");
                    }
                    else
                    {
                        await LogMessageToBrowserConsole($"Erro ao adicionar o usuário: {resultAdd}");
                    }
                }
                else
                {
                    // Logar o usuário
                    await sessionStorage.SetItemAsync("User", user);

                    if (user.IsHuman == null)
                    {
                        Navigation.NavigateTo("/EthicaiChoice");
                    }

                    await LogMessageToBrowserConsole("Usuário logado com sucesso.");
                }
            }
            else
            {
                await LogMessageToBrowserConsole("Erro ao conectar à carteira Solana. Verifique se a Phantom Wallet está instalada e conectada.");
            }
        }
        catch (JSException jsEx)
        {
            // Tratamento de erros de JavaScript
            await LogMessageToBrowserConsole($"Erro ao conectar com o JavaScript: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            // Captura e exibição de qualquer outro erro
            await LogMessageToBrowserConsole($"Erro inesperado: {ex.Message}");
        }
    }

    // Função para logar mensagens no console do navegador
    private async Task LogMessageToBrowserConsole(string message)
    {
        await JS.InvokeVoidAsync("logToConsole", message);
    }

    public class SolanaLoginResult
    {
        public string PublicKey { get; set; }
    }
}
