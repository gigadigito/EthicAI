@using DAL
@using EthicAI.Data
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject UserService userService

<div class="nk-modal modal fade" id="modalLogin" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-body">

                @if (String.IsNullOrEmpty(_Wallet))
                {
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span class="ion-android-close"></span>
                    </button>

                    <h4 class="mb-0 text-white"><span class="text-main-1">Conect</span> Wallet Solana</h4>

                    <div class="nk-gap-1"></div>
                    <form action="#" class="nk-form text-white">
                        <div class="row vertical-gap">
                            <div class="col-md-6"></div>
                            <div class="col-md-6"></div>
                        </div>

                        <div class="nk-gap-1"></div>
                        <div class="row vertical-gap">
                            <div class="col-md-6">
                                <a href="#" @onclick="RequestAuthorization" class="nk-btn nk-btn-rounded nk-btn-color-white nk-btn-block">Connect Phantom</a>
                            </div>
                        </div>
                    </form>
                }
                else
                {
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span class="ion-android-close"></span>
                    </button>

                    <h4 class="mb-0"><span class="text-main-1">Welcome </span> @_Name</h4>

                    <h5 class="mb-0 text-white" style="margin-top:5px">Thank you for helping us in the fight against AI machines!</h5>

                    <form action="#" class="nk-form text-white">
                        <div class="row vertical-gap">
                            <div class="col-md-6">
                                @* @if (String.IsNullOrEmpty(NomeUser))
                            {
                            <div class="nk-gap">Please enter your username</div>
                            <div class="nk-gap"></div>
                            <input type="text" @bind="NomeUser" name="user" class="form-control" placeholder="Username / nickname">
                            } *@
                            </div>
                            <div class="col-md-12">
                                Your ETCAI Balance: 0,00000.00000
                                <div class="nk-gap">@_Wallet</div>
                            </div>
                        </div>
                    </form>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public string _Wallet { get; set; }
    public string _Name { get; set; }

    [Parameter]
    public EventCallback OnLogin { get; set; }
    private User user = new User();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await sessionStorage.GetItemAsync<User>("User");

            if (user != null)
            {
                _Wallet = user.Wallet;
                _Name = user.Name;
            }
        }
        catch (Exception ex)
        {
            // await LogMessageToBrowserConsole($"Erro no OnInitializedAsync: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                var storedUser = await sessionStorage.GetItemAsync<User>("User");

                if (storedUser != null)
                {
                    _Wallet = user.Wallet;
                    _Name = user.Name;
                }
            }
        }
        catch (Exception)
        {


        }

    }

    private async Task RequestAuthorization()
    {
        try
        {
            // Chamar o JavaScript para conectar à carteira Solana (Phantom)
            var result = await JS.InvokeAsync<SolanaLoginResult>("solanaLogin");

            if (result != null && !string.IsNullOrEmpty(result.PublicKey))
            {
                _Wallet = result.PublicKey;

                // Log no console do navegador
                await LogMessageToBrowserConsole($"Carteira conectada: {_Wallet}");

                // Verificar se o usuário já existe no sistema usando o UserService injetado
                var user = await userService.GetUserByWallet(_Wallet);

                if (user == null)
                {
                    // Usuário não cadastrado, criar novo usuário
                    var newUser = new User
                        {
                            Wallet = _Wallet,
                            DtUpdate = DateTime.Now,
                            Name = _Name ?? ""
                        };

                    var resultAdd = await userService.AddUser(newUser);

                    if (resultAdd == "OK")
                    {
                        await LogMessageToBrowserConsole("Usuário criado com sucesso!");

                        // Logar o usuário
                        await sessionStorage.SetItemAsync("User", newUser);
                        Navigation.NavigateTo("/EthicaiChoice");
                    }
                    else
                    {
                        await LogMessageToBrowserConsole($"Erro ao adicionar o usuário: {resultAdd}");
                    }
                }
                else
                {
                    // Logar o usuário
                    await sessionStorage.SetItemAsync("User", user);

                    if (user.IsHuman == null)
                    {
                        Navigation.NavigateTo("/EthicaiChoice");
                    }

                    await OnLogin.InvokeAsync();
                    user.DtUpdate = DateTime.Now;
                    user.LastLogin = DateTime.Now;

                    await userService.UpdateUser(user);


                    await LogMessageToUser("Usuário logado com sucesso.");
                }
            }
            else
            {
                await LogMessageToUser("Erro ao conectar à carteira Solana. Verifique se a Phantom Wallet está instalada e conectada.");
            }
        }
        catch (JSException jsEx)
        {
            // Tratamento de erros de JavaScript
            await LogMessageToBrowserConsole($"Erro ao conectar com o JavaScript: {jsEx.Message}");
        }
        catch (Exception ex)
        {
            // Captura e exibição de qualquer outro erro
            await LogMessageToBrowserConsole($"Erro inesperado: {ex.Message}");
        }
    }

    // Função para logar mensagens no console do navegador
    private async Task LogMessageToBrowserConsole(string message)
    {
        await JS.InvokeVoidAsync("logToConsole", message);
    }

    // Função para logar mensagens no console do navegador
    private async Task LogMessageToUser(string message)
    {
        await JS.InvokeVoidAsync("AlertToUser", message);
    }

    public class SolanaLoginResult
    {
        public string PublicKey { get; set; }
    }
}
