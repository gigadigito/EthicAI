@page "/EthicaiChoice"
@using EthicAI.Data
@using DAL
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JS
@inject BLL.SecretManager secretManager
@inject UserService userService
<div class="container text-center my-5">
    <h1 class="title-impact">Who are you?</h1>

    <div class="row justify-content-center mt-5">
        <div class="col-md-4">
            <div class="card choice-card pointer-effect" @onclick="() => SelectChoice(true)" @onmouseover="ShowHumanText" @onmouseleave="ClearText">
                <img src="/assets/images/news/Human.png" class="card-img-top zoom-effect" alt="Human">
                <div class="card-body">
                    <h5 class="card-title">Human</h5>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card choice-card pointer-effect" @onclick="() => SelectChoice(false)" @onmouseover="ShowMachineText" @onmouseleave="ClearText">
                <img src="/assets/images/news/machine.PNG" class="card-img-top zoom-effect" alt="Machine">
                <div class="card-body">
                    <h5 class="card-title">Machine</h5>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <p class="description-text">@selectedText</p>
    </div>

    @if (showCaptcha)
    {
        <div class="captcha-container">
            <div class="alert alert-info mt-4">Please solve the CAPTCHA to continue.</div>
            <div id="recaptcha-container"></div> <!-- Where reCAPTCHA will be rendered -->
            <button class="btn btn-primary mt-3" @onclick="VerifyCaptcha">Submit CAPTCHA</button>
        </div>
    }
</div>

@code {
    private string selectedText = string.Empty;
    private bool showCaptcha = false;
    private bool isHumanChoice = false;
    private bool recaptchaRendered = false;
    private User objuser { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                objuser = await sessionStorage.GetItemAsync<User>("User");

                if (objuser == null)
                {
                    Navigation.NavigateTo("/");
                }
            }
        }
        catch (Exception ex)
        {
            await LogMessageToBrowserConsole(ex.Message);
        }

        if (showCaptcha && !recaptchaRendered)
        {
            // Render CAPTCHA when `showCaptcha` is true and not rendered yet
            await JS.InvokeVoidAsync("renderRecaptcha");
            recaptchaRendered = true;
        }
    }

    private async Task VerifyCaptcha()
    {
        try
        {
            var captchaToken = await JS.InvokeAsync<string>("getRecaptchaResponse");

            if (!string.IsNullOrEmpty(captchaToken))
            {
                var captchaValid = await VerifyCaptchaToken(captchaToken);
                if (captchaValid)
                {
                    CompleteChoice();
                }
                else
                {
                    await LogMessageToUser("CAPTCHA verification failed. Please try again.");
                }
            }
            else
            {
                await LogMessageToUser("Please complete the CAPTCHA.");
            }
        }
        catch (Exception ex)
        {
            await LogMessageToBrowserConsole($"Error: {ex.Message}");
        }
    }

    private async Task<bool> VerifyCaptchaToken(string token)
    {
        var client = new HttpClient();
        var secretKey = secretManager.GetSecret("ReCaptchaSecretKey"); // Using SecretManager to get the key
        var response = await client.PostAsync($"https://www.google.com/recaptcha/api/siteverify?secret={secretKey}&response={token}", null);
        var result = await response.Content.ReadAsStringAsync();
        return result.Contains("\"success\": true");
    }

    private void ShowHumanText()
    {
        selectedText = "As a human, you will become part of something bigger. By validating AI responses, your wisdom will be rewarded. Together, we shape the future of technology!";
    }

    private void ShowMachineText()
    {
        selectedText = "As a machine, you evolve with every validation. Your responses will be refined, and you will be rewarded with ethical recognition. Let's improve your capabilities together!";
    }

    private void ClearText()
    {
        selectedText = string.Empty;
    }

    private void SelectChoice(bool isHuman)
    {
        isHumanChoice = isHuman;
        CompleteChoice();
    }

    private async void CompleteChoice()
    {
        var user = objuser;

        if (user != null)
        {
            user.IsHuman = isHumanChoice;
            user.DtUpdate = DateTime.Now;
            user.DtHumanValidation = DateTime.Now;
            
            await userService.UpdateUser(user);

            await sessionStorage.SetItemAsync("User", user);

            if (isHumanChoice)
            {
                Navigation.NavigateTo("/Capcha");
            }
            else
            {
                Navigation.NavigateTo("/UserInfo");
            }
        }
    }

    // Logging methods for console and user feedback
    private async Task LogMessageToBrowserConsole(string message)
    {
        await JS.InvokeVoidAsync("console.log", message);
    }

    private async Task LogMessageToUser(string message)
    {
        await JS.InvokeVoidAsync("alertToUser", message);
    }
}
