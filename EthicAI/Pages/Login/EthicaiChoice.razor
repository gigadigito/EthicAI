@page "/EthicaiChoice"
@using EthicAI.Data
@using DAL
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JS

<div class="container text-center my-5">
    <h1 class="title-impact">Quem é você?</h1>

    <div class="row justify-content-center mt-5">
        <div class="col-md-4">
            <div class="card choice-card pointer-effect" @onclick="() => SelectChoice(true)" @onmouseover="ShowHumanText" @onmouseleave="ClearText">
                <img src="assets/images/news/Human.png" class="card-img-top zoom-effect" alt="Humano">
                <div class="card-body">
                    <h5 class="card-title">Humano</h5>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card choice-card pointer-effect" @onclick="() => SelectChoice(false)" @onmouseover="ShowMachineText" @onmouseleave="ClearText">
                <img src="assets/images/news/machine.PNG" class="card-img-top zoom-effect" alt="Máquina">
                <div class="card-body">
                    <h5 class="card-title">Máquina</h5>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <p class="description-text">@selectedText</p>
    </div>

    @if (showCaptcha)
    {
        <div class="captcha-container">
            <div class="alert alert-info mt-4">Por favor, resolva o CAPTCHA para continuar.</div>
            <div id="recaptcha-container"></div> <!-- Onde o reCAPTCHA será renderizado -->
            <button class="btn btn-primary mt-3" @onclick="VerifyCaptcha">Enviar CAPTCHA</button>
        </div>
    }
</div>

@code {
    private string selectedText = string.Empty;
    private bool showCaptcha = false;
    private bool isHumanChoice = false;
    private bool recaptchaRendered = false;
    private User objuser { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                objuser = await sessionStorage.GetItemAsync<User>("User");

                if (objuser == null)
                {
                    Navigation.NavigateTo("/");
                }
            }
        }
        catch (Exception ex)
        {
            await LogMessageToBrowserConsole(ex.Message);

        }


        if (showCaptcha && !recaptchaRendered)
        {
            // Renderizar o CAPTCHA quando showCaptcha for true e ainda não foi renderizado
            await JS.InvokeVoidAsync("renderRecaptcha");
            recaptchaRendered = true;
        }
    }
    // Função para logar mensagens no console do navegador
    private async Task LogMessageToBrowserConsole(string message)
    {
        await JS.InvokeVoidAsync("logToConsole", message);
    }

    // Função para logar mensagens no console do navegador
    private async Task LogMessageToUser(string message)
    {
        await JS.InvokeVoidAsync("AlertToUser", message);
    }

    private void ShowHumanText()
    {
        selectedText = "Como humano, você fará parte de algo maior. Ao validar as respostas de IA, sua sabedoria será recompensada. Juntos, moldamos o futuro da tecnologia!";
    }

    private void ShowMachineText()
    {
        selectedText = "Como máquina, você evolui a cada validação. Suas respostas serão refinadas, e você será recompensado com reconhecimento ético. Vamos melhorar suas capacidades juntos!";
    }

    private void ClearText()
    {
        selectedText = string.Empty;
    }

    private void SelectChoice(bool isHuman)
    {
        isHumanChoice = isHuman;
        CompleteChoice();
    }

    private async Task VerifyCaptcha()
    {
        try
        {
            // Chama a função personalizada do JavaScript para obter o token do reCAPTCHA
            var captchaToken = await JS.InvokeAsync<string>("getRecaptchaResponse");

            if (!string.IsNullOrEmpty(captchaToken))
            {
                var captchaValid = await VerifyCaptchaToken(captchaToken);
                if (captchaValid)
                {
                    CompleteChoice();
                }
                else
                {
                   await LogMessageToUser("Falha na verificação do CAPTCHA. Por favor, tente novamente.");
                }
            }
            else
            {
                  await LogMessageToUser("Por favor, complete o CAPTCHA.");
            }
        }
        catch (Exception ex)
        {
           await LogMessageToBrowserConsole($"Erro: {ex.Message}");
        }
    }

    private async Task<bool> VerifyCaptchaToken(string token)
    {
        var client = new HttpClient();
        var secretKey = "6Lf-wUkqAAAAAC6bx4LTzAFI7KaXtBoCsyxzBx_8";  // Sua chave secreta do reCAPTCHA
        var response = await client.PostAsync($"https://www.google.com/recaptcha/api/siteverify?secret={secretKey}&response={token}", null);
        var result = await response.Content.ReadAsStringAsync();
        return result.Contains("\"success\": true");
    }

    private async void CompleteChoice()
    {
        var user = objuser;

        if (user != null)
        {
            user.IsHuman = isHumanChoice;
            user.DtUpdate = DateTime.Now;

            await sessionStorage.SetItemAsync("User", user);
           
            if (isHumanChoice)
            {
                Navigation.NavigateTo("/Capcha");
            }
            else
            {
                Navigation.NavigateTo("/UserInfo");
            }
           
        }
    }
}
