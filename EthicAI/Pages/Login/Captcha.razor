@page "/Capcha"
@using EthicAI.Data
@using DAL
@inject NavigationManager Navigation
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JS

<div class="container text-center my-5">
    <h1 class="title-impact">Are you Human?</h1>

        <div class="captcha-container">
            <div class="alert alert-info mt-4">Por favor, resolva o CAPTCHA para continuar.</div>
            <div id="recaptcha-container"></div> <!-- Onde o reCAPTCHA será renderizado -->
            <button class="btn btn-primary mt-3" @onclick="VerifyCaptcha">Enviar CAPTCHA</button>
        </div>
    
</div>

@code {
    private string selectedText = string.Empty;
    private bool showCaptcha = false;
    private bool isHumanChoice = false;
    private bool recaptchaRendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        // Renderizar o CAPTCHA quando showCaptcha for true e ainda não foi renderizado
        await JS.InvokeVoidAsync("renderRecaptcha");
        recaptchaRendered = true;
       await VerifyCaptcha();
    }


    private void SelectChoice(bool isHuman)
    {
        isHumanChoice = isHuman;
        if (isHuman)
        {
            showCaptcha = true;
            recaptchaRendered = false; // Reinicia recaptchaRendered para poder renderizar novamente
            StateHasChanged(); // Atualiza a UI para mostrar o CAPTCHA
        }
        else
        {
            CompleteChoice();
        }
    }

    private async Task VerifyCaptcha()
    {
        try
        {
            // Chama a função personalizada do JavaScript para obter o token do reCAPTCHA
            var captchaToken = await JS.InvokeAsync<string>("getRecaptchaResponse");

            if (!string.IsNullOrEmpty(captchaToken))
            {
                var captchaValid = await VerifyCaptchaToken(captchaToken);
                if (captchaValid)
                {
                    CompleteChoice();
                }
                else
                {
                    selectedText = "Falha na verificação do CAPTCHA. Por favor, tente novamente.";
                }
            }
            else
            {
                selectedText = "Por favor, complete o CAPTCHA.";
            }
        }
        catch (Exception ex)
        {
            selectedText = $"Erro: {ex.Message}";
        }
    }

    private async Task<bool> VerifyCaptchaToken(string token)
    {
        var client = new HttpClient();
        var secretKey = "6Lf-wUkqAAAAAC6bx4LTzAFI7KaXtBoCsyxzBx_8";  // Sua chave secreta do reCAPTCHA
        var response = await client.PostAsync($"https://www.google.com/recaptcha/api/siteverify?secret={secretKey}&response={token}", null);
        var result = await response.Content.ReadAsStringAsync();
        return result.Contains("\"success\": true");
    }

    private async void CompleteChoice()
    {
        var user = await sessionStorage.GetItemAsync<User>("User");

        if (user != null)
        {
            user.IsHuman = isHumanChoice;
            user.DtUpdate = DateTime.Now;

            await sessionStorage.SetItemAsync("User", user);
            Navigation.NavigateTo("/UserInfo");
        }
    }
}
