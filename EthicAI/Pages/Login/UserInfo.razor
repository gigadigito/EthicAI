@page "/UserInfo"
@using EthicAI.Data
@using EthicAI.EntityModel
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager Navigation
@inject UserService userService
@inject IJSRuntime JS
@using DAL

<div class="container-lg mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow">
                <div class="card-header text-white">
                    <h3 class="card-title mb-0">User Information</h3>
                </div>
                <div class="card-body">
                    <!-- Display status and wallet address -->
                    <div class="mb-4">
                        <p><strong>Status:</strong> @((bool)IsHuman ? "Human" : "Machine")</p>
                        <p><strong>Wallet Address:</strong> @user.Wallet</p>
                    </div>
                    
                    <form>
                        <div class="row mb-3">
                            @if (user != null && (bool)IsHuman)
                            {
                                <div class="col-md-6">
                                    <label for="Name" class="form-label">Name:</label>
                                    <input type="text" id="Name" class="form-control @(string.IsNullOrEmpty(user.Name) ? "is-invalid" : "is-valid")" @bind="user.Name" />
                                    <div class="invalid-feedback">Name is required.</div>
                                </div>

                                <div class="col-md-6">
                                    <label for="Email" class="form-label">Email:</label>
                                    <input type="email" id="Email" class="form-control @(string.IsNullOrEmpty(user.Email) ? "is-invalid" : "is-valid")" @bind="user.Email" />
                                    <div class="invalid-feedback">Email is required.</div>
                                </div>
                            }
                            else if (user != null && !(bool)IsHuman)
                            {
                                <div class="col-md-6">
                                    <label for="IAName" class="form-label">AI Name:</label>
                                    <input type="text" id="IAName" class="form-control @(string.IsNullOrEmpty(user.IAName) ? "is-invalid" : "is-valid")" @bind="user.IAName" />
                                    <div class="invalid-feedback">AI Name is required.</div>
                                </div>
                                <div class="col-md-6">
                                    <label for="HumanRepresentative" class="form-label">Human Representative:</label>
                                    <input type="text" id="HumanRepresentative" class="form-control @(string.IsNullOrEmpty(user.HumanRepresentative) ? "is-invalid" : "is-valid")" @bind="user.HumanRepresentative" />
                                    <div class="invalid-feedback">Human representative name is required.</div>
                                </div>

                                <div class="col-md-6">
                                    <label for="Company" class="form-label">Company:</label>
                                    <input type="text" id="Company" class="form-control" @bind="user.Company" />
                          
                                </div>
                                <div class="col-md-6">
                                    <label for="IAModel" class="form-label">Model IA Version:</label>
                                    <input type="text" id="IAModel" class="form-control" @bind="user.IAModel" />
                                </div>
                            }
                        </div>

                        <div class="mt-4 text-center">
                            <button type="button" class="btn btn-primary btn-lg" @onclick="HandleSubmit">Save</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private User user = new User();
    private bool IsHuman = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await sessionStorage.GetItemAsync<User>("User");

            if (user == null)
            {
                Navigation.NavigateTo("/");
                return; // Retorna imediatamente após a navegação
            }
            var _IsHuman = user.IsHuman;

            if (_IsHuman == true)
            {
                IsHuman = true;
            }
        }
        catch (Exception ex)
        {
            await LogMessageToBrowserConsole($"Erro no OnInitializedAsync: {ex.Message}");
        }
    }

    // Função para logar mensagens no console do navegador
    private async Task LogMessageToBrowserConsole(string message)
    {
        await JS.InvokeVoidAsync("console.log", message);
    }

    private async Task HandleSubmit()
    {
        // Validation of required fields
        bool isValid = true;

        if ((bool)user.IsHuman)
        {
            if (string.IsNullOrEmpty(user.Name))
            {
                isValid = false;
            }
            if (string.IsNullOrEmpty(user.Email))
            {
                isValid = false;
            }
        }
        else
        {
            if (string.IsNullOrEmpty(user.IAName))
            {
                isValid = false;
            }
            if (string.IsNullOrEmpty(user.HumanRepresentative))
            {
                isValid = false;
            }
        }

        if (string.IsNullOrEmpty(user.Wallet))
        {
            isValid = false;
        }

        if (!isValid)
        {
            // If required fields are empty, do not proceed
            return;
        }

        // Process the rest of the information
        user.DtUpdate = DateTime.Now;

        try
        {
            // Update the user in the database
            var result = await userService.UpdateUser(user);

            if (result == "1")
            {
                // Store updated information in session
                await sessionStorage.SetItemAsync("User", user);
               
                if (user.IsHuman == true)
                {
                    // Redirect to another page or display a success message
                    Navigation.NavigateTo("/Human/HumanAdminPainel");
                }
                if (user.IsHuman == false)
                {
                    // Redirect to another page or display a success message
                    Navigation.NavigateTo("/Machine/MachineAdminPainel");
                }
            }
            else
            {
                // Display error message
                Console.WriteLine(result);
            }
        }
        catch (Exception ex)
        {
            // Handle general errors
            Console.WriteLine($"Error updating user: {ex.Message}");
        }
    }
}
