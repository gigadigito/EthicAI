@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace EthicAI.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="utf-8" />
    <base href="~/" />
   
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />

</head>
<body>

    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
       @*  <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a> *@
    </div>

    <script src="_framework/blazor.server.js"></script>
 
    
    <script src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit"
            async defer>
    </script>




    <script src="~/js/msg.js"></script>
       <!-- Include the latest version of Solana Web3.js -->
    <!-- Importando buffer antes de solanaweb3.js -->
    <script src="js/solana-web3-bundle.js"></script>


    <script>
        function closeallmodal() {
            // Função que fecha modais abertas e remove backdrops
            const closeModalAndRemoveBackdrop = () => {
                const modals = document.querySelectorAll('.modal.show');
                modals.forEach(modal => {
                    modal.classList.remove('show');
                    modal.style.display = 'none';
                });

                // Remove todos os elementos de backdrop que possam ter sido criados
                const backdrops = document.querySelectorAll('.modal-backdrop');
                backdrops.forEach(backdrop => backdrop.remove());

                // Restaura o scroll da página, caso tenha sido desativado
                document.body.classList.remove('modal-open');
                document.body.style.overflow = 'auto';
            };

            // Executa a função e continua tentando até que todos os backdrops sejam removidos
            closeModalAndRemoveBackdrop();

            // Intervalo que verifica continuamente a presença de backdrops
            const intervalId = setInterval(() => {
                closeModalAndRemoveBackdrop();

                // Interrompe o intervalo quando não houver mais backdrops na página
                if (!document.querySelector('.modal-backdrop')) {
                    clearInterval(intervalId);
                }
            }, 100); // Intervalo de verificação: 100ms
        }

      </script>


<script>
    console.log("Buffer:", Buffer);
console.log("Buffer.from exists:", typeof Buffer.from === "function");


</script>


    <script src="~/js/solanawallet.js?a=@Guid.NewGuid().ToString()"></script>
    <script src="~/js/solana-transactions.js?a=@Guid.NewGuid().ToString()"></script>
   
    <script type="text/javascript">
        var onloadCallback = function () {
            console.log("grecaptcha is ready!");
        };
    </script>

  
    <script>
        var recaptchaWidgetId;

    var recaptchaWidgetId = null;

    // Função para renderizar o reCAPTCHA com sua chave do site
    function renderRecaptcha() {
        if (typeof grecaptcha !== 'undefined') {
            recaptchaWidgetId = grecaptcha.render('recaptcha-container', {
                'sitekey': '6Lf-wUkqAAAAAHZ7VrkD3gesvGQI910fKmaeOYPN' // Sua chave do site
            });
        } else {
            console.error('reCAPTCHA não foi carregado corretamente.');
        }
    }

    // Função para obter o token do reCAPTCHA
    function getRecaptchaResponse() {
        if (typeof grecaptcha !== 'undefined' && recaptchaWidgetId !== null) {
            return grecaptcha.getResponse(recaptchaWidgetId);
        } else {
            console.error('reCAPTCHA não foi carregado corretamente.');
            return '';
        }
    }
</script>

    <script>
        function scrollToElement(elementId) {
            var element = document.getElementById(elementId);
            if (element) {
                element.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        }
    </script>
    <script>
        function scrollToElementInContainer(containerId, elementId) {
            var container = document.getElementById(containerId);
            var element = document.getElementById(elementId);

            if (container && element) {
                container.scrollTo({
                    top: element.offsetTop - container.offsetTop, // Calcula a posição do elemento
                    behavior: 'smooth'
                });
            }
        }
    </script>

</body>
</html>
